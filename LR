import pandas as pd
from sklearn.model_selection import RepeatedStratifiedKFold, GridSearchCV, cross_validate
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.feature_selection import SelectKBest, f_classif
from imblearn.over_sampling import SMOTE
import matplotlib.pyplot as plt

# Load dataset
df = pd.read_csv("fraud_detection_train.csv")  # Pastikan file berada di direktori kerja
X = df.drop(columns=['label', 'visit_id'])
y = df['label']

# Encode fitur kategorikal
for col in X.select_dtypes(include='object').columns:
    X[col] = LabelEncoder().fit_transform(X[col].astype(str))


# Scaling
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Feature Selection
X_selected = SelectKBest(score_func=f_classif, k=30).fit_transform(X_scaled, y)

# SMOTE Balancing
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X_selected, y)


 Tuning Logistic Regression
param_grid = {
    'C': [0.001, 0.01, 1, 10],
    'penalty': ['l1', 'l2'],
    'solver': ['liblinear', 'lbfgs']
}

cv = RepeatedStratifiedKFold(n_splits=5, n_repeats=2, random_state=42)
grid = GridSearchCV(LogisticRegression(max_iter=1000000000), param_grid, cv=cv, scoring='f1', n_jobs=-1)
grid.fit(X_resampled, y_resampled)

best_model = grid.best_estimator_
print("Best Parameters:", grid.best_params_)

scoring = ['precision', 'recall', 'f1', 'accuracy']
final_score = cross_validate(best_model, X_resampled, y_resampled,
                             scoring=scoring, cv=cv, n_jobs=-1)

results = pd.DataFrame({
    'Precision': final_score['test_precision'],
    'Recall': final_score['test_recall'],
    'F1-Score': final_score['test_f1'],
    'Accuracy': final_score['test_accuracy']
})
results.loc['Rata-rata'] = results.mean()
results
